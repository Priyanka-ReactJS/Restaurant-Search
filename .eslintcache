[{"D:\\React_Projects\\Restaurant_Search\\src\\index.js":"1","D:\\React_Projects\\Restaurant_Search\\src\\App.js":"2","D:\\React_Projects\\Restaurant_Search\\src\\reportWebVitals.js":"3","D:\\React_Projects\\Restaurant_Search\\src\\store\\reducers\\index.js":"4","D:\\React_Projects\\Restaurant_Search\\src\\container\\home.js":"5","D:\\React_Projects\\Restaurant_Search\\src\\store\\reducers\\city.js":"6","D:\\React_Projects\\Restaurant_Search\\src\\store\\actions\\city.js":"7","D:\\React_Projects\\Restaurant_Search\\src\\component\\input.js":"8","D:\\React_Projects\\Restaurant_Search\\src\\store\\actions\\types.js":"9"},{"size":967,"mtime":1612745914955,"results":"10","hashOfConfig":"11"},{"size":199,"mtime":1612745678738,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1612553717409,"results":"13","hashOfConfig":"11"},{"size":46,"mtime":1612553719524,"results":"14","hashOfConfig":"11"},{"size":5399,"mtime":1612894975251,"results":"15","hashOfConfig":"11"},{"size":1091,"mtime":1612553719505,"results":"16","hashOfConfig":"11"},{"size":3151,"mtime":1613439866825,"results":"17","hashOfConfig":"11"},{"size":452,"mtime":1612747213652,"results":"18","hashOfConfig":"11"},{"size":482,"mtime":1612553719478,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"tde72o",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"D:\\React_Projects\\Restaurant_Search\\src\\index.js",[],["40","41"],"D:\\React_Projects\\Restaurant_Search\\src\\App.js",[],"D:\\React_Projects\\Restaurant_Search\\src\\reportWebVitals.js",[],"D:\\React_Projects\\Restaurant_Search\\src\\store\\reducers\\index.js",[],"D:\\React_Projects\\Restaurant_Search\\src\\container\\home.js",["42"],"import React, { useState, useEffect, useRef } from 'react'\nimport { getEntityDetails, getRestaurant, resetRestaurnatList } from \"../store/actions/city\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { bindActionCreators } from \"redux\"\nimport Input from '../component/input'\nimport './home.css'\n\nconst Home = (prop) => {\n    const dispatch = useDispatch();\n    const [city, setCity] = useState()\n    const [params, setParams] = useState()\n    const [flag, setFlag] = useState(false)\n    \n    const inputRef = useRef(null);\n\n    const handleChange = (event) => {\n        setCity(event.target.value);\n    }\n    const restaurantList = useSelector((state) => state.entityState.restaurantList)\n    const loading = useSelector(state => state.entityState.loading)\n    const dispatchChaining = () => async (dispatch) => {\n        await Promise.resolve(\n            dispatch(getEntityDetails(city)),\n        );\n    };\n    const entity_id = useSelector((state) => state.entityState.entity_id);\n    useEffect(() => {\n        if (entity_id) {\n            dispatch(getRestaurant(params, entity_id))\n        } else {\n            dispatch(resetRestaurnatList())\n        }\n        setTimeout(() => {\n            // Set focus on result container after submit search (accessibilty use) \n            if (inputRef && inputRef.current) {\n                inputRef.current.focus();\n            }\n        }, 5000);\n\n\n    }, [entity_id, flag, params, dispatch])\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setFlag(!flag);\n        const actions = bindActionCreators({ dispatchChaining }, dispatch);\n        actions.dispatchChaining()\n    }\n\n    const handleChangeParams = (event) => {\n        setParams(event.target.value);\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <div className=\"jumbotron jumbotron-billboard text-center\">\n                    <div className=\"img\"></div>\n                    <div className=\"container pt\">\n                        <div className=\"container-heading\">\n                            <h1>Find the best Restaurants</h1>\n                        </div>\n                        <div className=\"row mx-auto well col-lg-12 mt-5\">\n                            <div className=\"col-xs-12 pr-0\">\n                                <Input id=\"getCity\" value={city} onChange={handleChange} type=\"text\" placeholder=\"City\" aria-label=\"Type City\" autoFocus />\n                            </div>\n                            <div className=\"col-xs-12 pl-0 pr-0\">\n                                <Input id=\"searchParams\" value={params} onChange={handleChangeParams} type=\"text\" placeholder=\"Restaurant\" aria-label=\"Search for Restaurant\" />\n                            </div>\n                            <div className=\"col-xs-12 pl-0 pr-0\">\n                                <button aria-label=\"Search\" type=\"submit\" className=\"btn btn-success col-xs-2 searchButton\">Search</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div>\n                {\n                    (loading) ? <div class=\"loader\"></div> :\n                        (restaurantList.length === 0)\n                            ? <div>\n                                <span className=\"no-data\">No Restaurant found</span>\n                            </div>\n                            : <div class=\"result-container\" ref={inputRef}  >\n                                {(restaurantList || []).map(restaurant => {\n                                    return (\n                                        <div className=\"data img-rounded\" tabIndex=\"0\" >\n                                            <img className=\"resimg\" src={restaurant.restaurant.featured_image} alt=\"Restaurant Image\" height=\"185\" width=\"185\" />\n                                            <p className=\"result-details-container\">\n                                                <span className=\"restaurantName\">\n                                                    <strong> {restaurant.restaurant.name}</strong>\n                                                </span>\n                                                <br />\n                                                <span className=\"rating\"> <strong >{restaurant.restaurant.user_rating.aggregate_rating}</strong></span>\n                                                <br />\n                                                <span><strong className=\"text-primary\">{restaurant.restaurant.location.locality}</strong></span>\n                                                <br />\n                                                <span><strong>{restaurant.restaurant.location.address}</strong></span>\n                                                <br />\n                                                <span> <strong className=\"text-primary cuisines\">CUISINES: </strong>:{restaurant.restaurant.cuisines}</span>\n                                            </p>\n                                            <br />\n                                            <hr />\n                                        </div>\n                                    )\n                                })}\n                                <br />\n                            </div>\n                }\n            </div>\n        </form>\n    )\n}\nexport default Home;\n","D:\\React_Projects\\Restaurant_Search\\src\\store\\reducers\\city.js",[],"D:\\React_Projects\\Restaurant_Search\\src\\store\\actions\\city.js",[],"D:\\React_Projects\\Restaurant_Search\\src\\component\\input.js",[],"D:\\React_Projects\\Restaurant_Search\\src\\store\\actions\\types.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":87,"column":45,"nodeType":"49","endLine":87,"endColumn":162},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]